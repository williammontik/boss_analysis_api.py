import os
import smtplib
import random
import logging
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText

from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

# ── Flask Setup ─────────────────────────────────────────────────────────────
app = Flask(__name__)
CORS(app)
app.logger.setLevel(logging.DEBUG)

# ── SMTP & OpenAI Setup ─────────────────────────────────────────────────────
SMTP_SERVER   = "smtp.gmail.com"
SMTP_PORT     = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
if not SMTP_PASSWORD:
    app.logger.warning("SMTP_PASSWORD is not set; emails may fail.")

openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    raise RuntimeError("OPENAI_API_KEY not set.")
client = OpenAI(api_key=openai_api_key)

def send_email(html_body: str):
    msg = MIMEText(html_body, 'html')
    msg["Subject"] = "New Boss Submission"
    msg["From"]    = SMTP_USERNAME
    msg["To"]      = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as s:
            s.starttls()
            s.login(SMTP_USERNAME, SMTP_PASSWORD)
            s.send_message(msg)
    except Exception:
        app.logger.exception("Email failed")

CHINESE_MONTHS = {
    "一月":1,"二月":2,"三月":3,"四月":4,
    "五月":5,"六月":6,"七月":7,"八月":8,
    "九月":9,"十月":10,"十一月":11,"十二月":12
}

@app.route("/boss_analyze", methods=["POST"])
def boss_analyze():
    data = request.get_json(force=True)
    try:
        # 1) Extract and clean
        name       = data.get("memberName","").strip()
        position   = data.get("position","").strip()
        department = data.get("department","").strip()
        experience = data.get("experience","").strip()
        sector     = data.get("sector","").strip()
        challenge  = data.get("challenge","").strip()
        focus      = data.get("focus","").strip()
        country    = data.get("country","").strip()
        referrer   = data.get("referrer","").strip()

        # 2) DOB → age
        d, m, y = data.get("dob_day"), data.get("dob_month"), data.get("dob_year")
        if d and m and y:
            month = int(m) if m.isdigit() else CHINESE_MONTHS.get(m, datetime.strptime(m,"%B").month)
            birth = datetime(int(y), month, int(d))
        else:
            birth = parser.parse(data.get("dob",""), dayfirst=True)
        today = datetime.today()
        age = today.year - birth.year - ((today.month,today.day) < (birth.month,birth.day))

        # 3) Generate metrics
        def mk(title):
            return {
                "title": title,
                "labels": ["Segment","Regional","Global"],
                "values": [random.randint(60,90), random.randint(55,85), random.randint(60,88)]
            }
        metrics = [ mk("Communication Efficiency"),
                    mk("Leadership Readiness"),
                    mk("Task Completion Reliability") ]

        # 4) Build the fixed‐template analysis
        # Demographics
        lines = [
            "📄 AI-Generated Report\n\nWorkplace Performance Report\n",
            f"• Age: {age}",
            f"• Position: {position}",
            f"• Department: {department}",
            f"• Experience: {experience} year(s)",
            f"• Sector: {sector}",
            f"• Country: {country}",
            f"• Main Challenge: {challenge}",
            f"• Development Focus: {focus}\n",
            "📊 Workplace Metrics:"
        ]
        # Metrics bullets
        for m in metrics:
            vals = m["values"]
            lines.append(f"• {m['title']}: "
                         f"Segment {vals[0]}%, "
                         f"Regional {vals[1]}%, "
                         f"Global {vals[2]}%")
        # Comparison paragraph
        lines.append(
            "\n📌 Comparison with Regional & Global Trends:\n"
            f"This segment shows relative strength in {focus.lower()} performance.\n"
            f"There may be challenges around {focus.lower()}, with moderate gaps compared to regional and global averages.\n"
            "Consistency, training, and mentorship are recommended to bridge performance gaps.\n"
        )
        # Key findings
        lines.append("🔍 Key Findings:")
        lines += [
            "1. Task execution reliability is above average across all benchmarks.",
            "2. Communication style can be enhanced to improve cross-team alignment.",
            "3. Growth potential is strong with proper support.\n"
        ]
        # Footer
        lines.append(
            "The insights in this report are generated by KataChat’s AI systems analyzing:\n"
            "1. Our proprietary database of anonymized professional profiles across Singapore, Malaysia, and Taiwan\n"
            "2. Aggregated global business benchmarks from trusted OpenAI research and leadership trend datasets\n"
            "All data is processed through our AI models to identify statistically significant patterns while maintaining strict PDPA compliance. Sample sizes vary by analysis, with minimum thresholds of 1,000+ data points for management comparisons.\n"
            "PS: This report has also been sent to your email inbox and should arrive within 24 hours. "
            "If you'd like to discuss it further, feel free to reach out — we’re happy to arrange a 15-minute call at your convenience."
        )
        analysis = "\n".join(lines)

        # 5) Build and send the exact same HTML email you provided
        html = f"""
<html><body style="font-family:sans-serif;color:#333">
<h2>🎯 Boss Submission Details:</h2>
<p>
👤 <strong>Full Name:</strong> {name}<br>
🏢 <strong>Position:</strong> {position}<br>
📂 <strong>Department:</strong> {department}<br>
🗓️ <strong>Experience:</strong> {experience} year(s)<br>
📌 <strong>Sector:</strong> {sector}<br>
⚠️ <strong>Challenge:</strong> {challenge}<br>
🌟 <strong>Focus:</strong> {focus}<br>
📧 <strong>Email:</strong> {data.get('email')}<br>
🌍 <strong>Country:</strong> {country}<br>
🎂 <strong>DOB:</strong> {birth.date()}<br>
💬 <strong>Referrer:</strong> {referrer}
</p>
<hr>
<pre style="font-size:14px;white-space:pre-wrap">{analysis}</pre>
</body></html>"""
        send_email(html)

        # 6) Return JSON for charts + display
        return jsonify({
            "metrics": metrics,
            "analysis": analysis
        })

    except Exception as e:
        app.logger.exception("Error in /boss_analyze")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0")
