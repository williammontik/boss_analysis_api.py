import os
import smtplib
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText

from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

SMTP_SERVER   = "smtp.gmail.com"
SMTP_PORT     = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
if not SMTP_PASSWORD:
    app.logger.warning("SMTP_PASSWORD is not set; emails may fail.")

def compute_age(data):
    d, m, y = data.get("dob_day"), data.get("dob_month"), data.get("dob_year")
    try:
        if d and m and y:
            month = int(m) if m.isdigit() else datetime.strptime(m, "%B").month
            bd = datetime(int(y), month, int(d))
        else:
            bd = parser.parse(data.get("dob",""), dayfirst=True)
    except:
        bd = datetime.today()
    today = datetime.today()
    return today.year - bd.year - ((today.month, today.day) < (bd.month, bd.day))

def send_email(html_body: str):
    msg = MIMEText(html_body, 'html')
    msg["Subject"] = "New Boss Submission"
    msg["From"]    = SMTP_USERNAME
    msg["To"]      = SMTP_USERNAME
    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as s:
        s.starttls()
        s.login(SMTP_USERNAME, SMTP_PASSWORD)
        s.send_message(msg)

@app.route("/boss_analyze", methods=["POST"])
def boss_analyze():
    data = request.get_json(force=True)
    position   = data.get("position","").strip()
    department = data.get("department","").strip()
    experience = data.get("experience","").strip()
    sector     = data.get("sector","").strip()
    challenge  = data.get("challenge","").strip()
    focus      = data.get("focus","").strip()
    country    = data.get("country","").strip()
    age = compute_age(data)

    # Fixed metrics
    metrics = [
        ("Communication Efficiency", 79, 65, 74, "#5E9CA0"),
        ("Leadership Readiness",      63, 68, 76, "#FF9F40"),
        ("Task Completion Reliability",82, 66, 84, "#9966FF"),
    ]

    # PDPA footer
    footer = """
<div style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
  <strong>The insights in this report are generated by KataChat‚Äôs AI systems analyzing:</strong><br>
  1. Our proprietary database of anonymized professional profiles across Singapore, Malaysia, and Taiwan<br>
  2. Aggregated global business benchmarks from trusted OpenAI research and leadership trend datasets<br>
  <em>All data is processed through our AI models to identify statistically significant patterns while maintaining strict PDPA compliance. Sample sizes vary by analysis, with minimum thresholds of 1,000+ data points for management comparisons.</em>
</div>
<p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
  <strong>PS:</strong> This report has also been sent to your email inbox and should arrive within 24 hours.
  If you'd like to discuss it further, feel free to reach out ‚Äî we‚Äôre happy to arrange a 15-minute call at your convenience.
</p>
"""

    # Build HTML fragment with horizontal bars only
    html = ""
    for title, seg, reg, glob, color in metrics:
        html += f"""
<div style="margin-bottom:16px;">
  <strong>{title}</strong><br>
  Segment: <span style="display:inline-block;width:{seg}%;height:12px;background:{color};border-radius:4px;"></span> {seg}%<br>
  Regional: <span style="display:inline-block;width:{reg}%;height:12px;background:{color};border-radius:4px;"></span> {reg}%<br>
  Global: <span style="display:inline-block;width:{glob}%;height:12px;background:{color};border-radius:4px;"></span> {glob}%
</div>
"""
    # Three-line gap
    html += "<br>\n<br>\n<br>\n"
    # Report header
    html += "<h2 class=\"sub\">üìÑ Workplace Performance Report</h2>\n"
    # Narrative
    html += "<div class=\"narrative\">\n"
    html += (
        f"‚Ä¢ Age: {age}<br>"
        f"‚Ä¢ Position: {position}<br>"
        f"‚Ä¢ Department: {department}<br>"
        f"‚Ä¢ Experience: {experience} year(s)<br>"
        f"‚Ä¢ Sector: {sector}<br>"
        f"‚Ä¢ Country: {country}<br>"
        f"‚Ä¢ Main Challenge: {challenge}<br>"
        f"‚Ä¢ Development Focus: {focus}<br>"
    )
    html += "</div>\n"
    # Global Section
    html += "<h2 class=\"sub\">üåê Global Section Analytical Report</h2>\n<div class=\"global\">\n"
    paragraphs = [
        f"As a {position} in the {sector} sector in {country}, you orchestrate multi-channel sales initiatives to drive consistent growth.",
        "Our benchmark of over 2,000 sales leaders shows that 'sales targets' are cited by 74% as the top pressure point.",
        f"Teams enhancing '{focus}' through AI-driven lead scoring saw a 15% increase in qualified pipeline and a 10% boost in conversion rates.",
        "Targeted training reduced new-hire ramp time by 20%, equipping teams with sector-specific tactics.",
        "Cross-regional collaboration increased pipeline by 20%, leveraging unified metrics and integrated strategies.",
        "Predictive analytics dashboards improved forecast accuracy by 18%, enabling proactive quota adjustments.",
        "Recommended steps:<br>1) Quarterly scenario-based prospecting sprints;<br>2) Real-time dashboards for tracking 'sales targets';<br>3) Peer-mentorship pods for sharing best practices."
    ]
    for p in paragraphs:
        html += f"<p>{p}</p>\n"
    html += "</div>\n"
    # Append footer
    html += footer

    # Send email
    send_email(html)

    # Return JSON for widget
    return jsonify({
        "metrics": [
            {"title": t, "labels": ["Segment","Regional","Global"], "values":[s,r,g]}
            for t,s,r,g,_ in metrics
        ],
        "analysis": html
    })

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0")
