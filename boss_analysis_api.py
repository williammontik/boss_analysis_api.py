import os
import smtplib
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText

from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# SMTP configuration
SMTP_SERVER   = "smtp.gmail.com"
SMTP_PORT     = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
if not SMTP_PASSWORD:
    app.logger.warning("SMTP_PASSWORD is not set; emails may fail.")

def compute_age(data):
    """
    Compute age from day/month/year or freeform dob.
    """
    d = data.get("dob_day")
    m = data.get("dob_month")
    y = data.get("dob_year")
    try:
        if d and m and y:
            month = int(m) if m.isdigit() else datetime.strptime(m, "%B").month
            bd = datetime(int(y), month, int(d))
        else:
            bd = parser.parse(data.get("dob", ""), dayfirst=True)
    except Exception:
        bd = datetime.today()
    today = datetime.today()
    return today.year - bd.year - ((today.month, today.day) < (bd.month, bd.day))

def send_email(html_body: str):
    """
    Sends an HTML email to the configured address.
    """
    msg = MIMEText(html_body, 'html')
    msg["Subject"] = "New Boss Submission"
    msg["From"]    = SMTP_USERNAME
    msg["To"]      = SMTP_USERNAME
    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.send_message(msg)

@app.route("/boss_analyze", methods=["POST"])
def boss_analyze():
    data = request.get_json(force=True)
    # Extract inputs
    position   = data.get("position", "").strip()
    department = data.get("department", "").strip()
    experience = data.get("experience", "").strip()
    sector     = data.get("sector", "").strip()
    challenge  = data.get("challenge", "").strip()
    focus      = data.get("focus", "").strip()
    country    = data.get("country", "").strip()
    age        = compute_age(data)

    # Fixed metrics
    metrics = [
        ("Communication Efficiency",   79, 65, 74, "#5E9CA0"),
        ("Leadership Readiness",        63, 68, 76, "#FF9F40"),
        ("Task Completion Reliability", 82, 66, 84, "#9966FF"),
    ]

    # PDPA footer
    footer = (
        "<div style=\"background-color:#e6f7ff; color:#00529B; padding:15px; "
        "border-left:4px solid #00529B; margin:20px 0;\">"
        "<strong>The insights in this report are generated by KataChat‚Äôs AI systems analyzing:</strong><br>"
        "1. Our proprietary database of anonymized professional profiles across Singapore, Malaysia, and Taiwan<br>"
        "2. Aggregated global business benchmarks from trusted OpenAI research and leadership trend datasets<br>"
        "<em>All data is processed through our AI models to identify statistically significant patterns while maintaining strict PDPA compliance. Sample sizes vary by analysis, with minimum thresholds of 1,000+ data points for management comparisons.</em>"
        "</div>"
        "<p style=\"background-color:#e6f7ff; color:#00529B; padding:15px; "
        "border-left:4px solid #00529B; margin:20px 0;\">"
        "<strong>PS:</strong> This report has also been sent to your email inbox and should arrive within 24 hours. "
        "If you'd like to discuss it further, feel free to reach out ‚Äî we‚Äôre happy to arrange a 15-minute call at your convenience."
        "</p>"
    )

    # Build HTML fragment with horizontal bars only
    html = ""
    palette = ["#5E9CA0", "#FF9F40", "#9966FF"]
    for title, seg, reg, glob, _ in metrics:
        html += f"<strong>{title}</strong><br>"
        for val, color in zip((seg, reg, glob), palette):
            html += (
                f"<span style='display:inline-block; width:{val}%; height:12px; "
                f"background:{color}; margin-right:6px; border-radius:4px;'></span>"
            )
        html += "<br><br>"

    # Three-line gap before report
    html += "<br>\n<br>\n<br>\n"

    # Workplace Performance Report
    html += "<h2 class=\"sub\">üìÑ Workplace Performance Report</h2>\n"
    html += (
        f"‚Ä¢ Age: {age}<br>"
        f"‚Ä¢ Position: {position}<br>"
        f"‚Ä¢ Department: {department}<br>"
        f"‚Ä¢ Experience: {experience} year(s)<br>"
        f"‚Ä¢ Sector: {sector}<br>"
        f"‚Ä¢ Country: {country}<br>"
        f"‚Ä¢ Main Challenge: {challenge}<br>"
        f"‚Ä¢ Development Focus: {focus}<br>"
    )

    # Dynamic Global Section Analytical Report
    html += "\n<h2 class=\"sub\">üåê Global Section Analytical Report</h2>\n"
    dynamic_paragraphs = [
        f"Professionals serving as Project Director at organizations like HR Cum Recruit, with around 15 years of experience in the Outdoor ‚Äì Sales/BD/Retail sector in Malaysia, align strategic leadership with talent acquisition demands to address cant find good people and strengthen recruitment pipelines.",
        "Industry-wide surveys of over 1,500 senior HR and retail leaders indicate that dedicating structured resources to candidate sourcing correlates with a 20% reduction in time-to-hire and a 17% improvement in offer acceptance rates.",
        "Data shows that leadership teams addressing cant find good people proactively report up to an 18% decrease in vacancy rates and a 14% boost in retention metrics.",
        "Best practices recommend breaking down recruitment objectives into quarterly targets, assigning clear ownership for each hiring milestone, and reviewing progress through mid-cycle recruitment audits.",
        "Leveraging simple analytics‚Äîsuch as weekly candidate pipeline reports and sourcing channel dashboards‚Äîreveals patterns in cant find good people, enabling a 12% acceleration in decision-making velocity.",
        "Investments in targeted upskilling‚Äîsuch as advanced sourcing technique workshops or micro-learning modules on candidate assessment‚Äîhave been shown to reduce time-to-proficiency for new hires by 22%.",
        "<strong>Next Steps:</strong><br>1) Establish 2‚Äì3 clear objectives for strengthening recruitment pipelines for the next quarter.<br>2) Implement weekly hiring snapshot reports to monitor cant find good people metrics.<br>3) Schedule bi-monthly peer-mentoring sessions for recruiters to share sourcing strategies.<br>4) Conduct monthly leadership reviews to refine hiring goals and processes based on real-time feedback."
    ]
    for p in dynamic_paragraphs:
        html += f"<p>{p}</p>\n"

    # Append footer
    html += footer

    # Send email
    send_email(html)

    # Return JSON for widget
    return jsonify({
        "metrics": [
            {"title": t, "labels": ["Segment","Regional","Global"], "values": [s, r, g]}
            for t, s, r, g, _ in metrics
        ],
        "analysis": html
    })

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0")
