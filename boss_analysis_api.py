import os
import smtplib
import random
import logging
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText

from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
app.logger.setLevel(logging.DEBUG)

SMTP_SERVER   = "smtp.gmail.com"
SMTP_PORT     = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
if not SMTP_PASSWORD:
    app.logger.warning("SMTP_PASSWORD is not set; emails may fail.")

openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    raise RuntimeError("OPENAI_API_KEY not set.")
client = OpenAI(api_key=openai_api_key)

def send_email(html_body: str):
    msg = MIMEText(html_body, 'html')
    msg["Subject"] = "New Boss Submission"
    msg["From"]    = SMTP_USERNAME
    msg["To"]      = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as s:
            s.starttls()
            s.login(SMTP_USERNAME, SMTP_PASSWORD)
            s.send_message(msg)
        app.logger.info("✅ Email sent successfully.")
    except Exception:
        app.logger.exception("Email sending failed")

@app.route("/boss_analyze", methods=["POST"])
def boss_analyze():
    data = request.get_json(force=True)
    try:
        # ... [parsing, metrics generation, summary building as before] ...
        # Assume `analysis` holds your final text report,
        # and `metrics` your list of metric dicts.

        # === Build the email HTML with your preferred styling ===
        footer = """
<div style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
  <strong>The insights in this report are generated by KataChat’s AI systems analyzing:</strong><br>
  1. Our proprietary database of anonymized professional profiles across Singapore, Malaysia, and Taiwan<br>
  2. Aggregated global business benchmarks from trusted OpenAI research and leadership trend datasets<br>
  <em>All data is processed through our AI models to identify statistically significant patterns while maintaining strict PDPA compliance. Sample sizes vary by analysis, with minimum thresholds of 1,000+ data points for management comparisons.</em>
</div>
<p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
  <strong>PS:</strong> This report has also been sent to your email inbox and should arrive within 24 hours.
  If you'd like to discuss it further, feel free to reach out — we’re happy to arrange a 15-minute call at your convenience.
</p>
"""

        html = f"""
<html><body style="font-family:sans-serif;color:#333">
  <h2>🎯 Boss Submission Details:</h2>
  <p>
    👤 <strong>Full Name:</strong> {data.get('memberName')}<br>
    🏢 <strong>Position:</strong> {data.get('position')}<br>
    📂 <strong>Department:</strong> {data.get('department')}<br>
    🗓️ <strong>Experience:</strong> {data.get('experience')} year(s)<br>
    📌 <strong>Sector:</strong> {data.get('sector')}<br>
    ⚠️ <strong>Challenge:</strong> {data.get('challenge')}<br>
    🌟 <strong>Focus:</strong> {data.get('focus')}<br>
    📧 <strong>Email:</strong> {data.get('email')}<br>
    🌍 <strong>Country:</strong> {data.get('country')}<br>
    🎂 <strong>DOB:</strong> {datetime.strptime(data.get('dob_year')+'-'+data.get('dob_month')+'-'+data.get('dob_day'), "%Y-%m-%d").date()}<br>
    💬 <strong>Referrer:</strong> {data.get('referrer')}
  </p>
  <hr>
  <h2>📄 AI-Generated Report</h2>
  <div style="font-size:14px; white-space:pre-wrap; margin-bottom:20px;">
    {analysis}
  </div>
  {footer}
</body></html>
"""

        send_email(html)

        return jsonify({"metrics": metrics, "analysis": analysis})

    except Exception as e:
        app.logger.exception("Error in /boss_analyze")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0")
