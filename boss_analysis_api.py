import os
import random
import smtplib
from flask import Flask, request, jsonify
from flask_cors import CORS
from email.mime.text import MIMEText
from openai import OpenAI

# Setup
app = Flask(__name__)
CORS(app)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

# Utility
def send_email_report(to_email, report_text):
    msg = MIMEText(report_text, "html")
    msg["Subject"] = "ðŸ“Š Team Member Performance Report"
    msg["From"] = SMTP_USERNAME
    msg["To"] = to_email

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.sendmail(SMTP_USERNAME, to_email, msg.as_string())

@app.route("/boss_analyze", methods=["POST"])
def analyze_boss():
    data = request.json
    email = data.get("email", "")
    age = 2025 - int(data.get("dob_year", 1985))
    country = data.get("country", "")
    sector = data.get("sector", "")
    gender = "Male" if data["position"].lower() in ["engineer", "manager", "salesman"] else "Female"

    # Simulate random metrics
    categories = [
        "Communication Efficiency",
        "Leadership Readiness",
        "Task Completion Reliability",
        "Customer Relationship Management",
        "Product Knowledge"
    ]
    metrics = []
    for category in random.sample(categories, 3):
        s = random.randint(60, 90)
        r = s - random.randint(2, 6)
        g = r + random.randint(-2, 2)
        metrics.append({
            "title": category,
            "labels": ["Segment", "Regional", "Global"],
            "values": [s, r, g]
        })

    # Compose prompt
    metric_summary = "\n".join([
        f"{m['title']}: Segment {m['values'][0]}%, Regional {m['values'][1]}%, Global {m['values'][2]}%"
        for m in metrics
    ])

    prompt = f"""
You are an expert corporate trainer. Write a structured, insight-rich workplace performance report based on this team member profile:

Age: {age}
Gender: {gender}
Country: {country}
Sector: {sector}
Main Challenge: {data['challenge']}
Development Focus: {data['focus']}

Performance Metrics:
{metric_summary}

Respond in the following sections:

1. Workplace Performance Summary (max 2 sentences)
2. Comparison with Segment / Regional / Global Averages
3. Key Findings (use 3 numbered bullet points with clear observations)
4. Recommendations for growth (1 paragraph)
5. Use professional but encouraging tone. Don't mention the person's name.
6. Don't mention AI or OpenAI in the main paragraph.

At the end, append:
<p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
<strong>The insights in this report are generated by KataChatâ€™s AI systems analyzing:</strong><br>
1. Our proprietary database of anonymized professional profiles across Singapore, Malaysia, and Taiwan<br>
2. Aggregated global business benchmarks from trusted OpenAI research and leadership trend datasets<br>
<em>All data is processed through our AI models to identify statistically significant patterns while maintaining strict PDPA compliance. Sample sizes vary by analysis, with minimum thresholds of 1,000+ data points for management comparisons.<br>
Report results may vary even for similar profiles, as the analysis is based on live data.</em>
</p>

<p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
<strong>PS:</strong> This report has also been sent to your email inbox and should arrive within 24 hours. If you'd like to discuss it further, feel free to reach out â€” weâ€™re happy to arrange a 15-minute call at your convenience.
</p>
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        final_output = response.choices[0].message.content.strip()
        send_email_report(email, final_output)
        return jsonify({
            "analysis": final_output,
            "metrics": metrics
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)
