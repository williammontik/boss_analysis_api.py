# -*- coding: utf-8 -*-

import os

import smtplib

from datetime import datetime

from dateutil import parser

from flask import Flask, request, jsonify

from flask_cors import CORS

from email.mime.text import MIMEText

from openai import OpenAI

import random



app = Flask(__name__)

CORS(app)



client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))



SMTP_SERVER = "smtp.gmail.com"

SMTP_PORT = 587

SMTP_USERNAME = "kata.chatbot@gmail.com"

SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")





def compute_age(data):

Â  Â  d, m, y = data.get("dob_day"), data.get("dob_month"), data.get("dob_year")

Â  Â  try:

Â  Â  Â  Â  if d and m and y:

Â  Â  Â  Â  Â  Â  month = int(m) if m.isdigit() else datetime.strptime(m, "%B").month

Â  Â  Â  Â  Â  Â  bd = datetime(int(y), month, int(d))

Â  Â  Â  Â  else:

Â  Â  Â  Â  Â  Â  bd = parser.parse(data.get("dob", ""), dayfirst=True)

Â  Â  except Exception:

Â  Â  Â  Â  bd = datetime.today()

Â  Â  today = datetime.today()

Â  Â  return today.year - bd.year - ((today.month, today.day) < (bd.month, bd.day))





def send_email(html_body: str):

Â  Â  msg = MIMEText(html_body, 'html')

Â  Â  msg["Subject"] = "Boss Report Submission"

Â  Â  msg["From"] = SMTP_USERNAME

Â  Â  msg["To"] = SMTP_USERNAME

Â  Â  with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:

Â  Â  Â  Â  server.starttls()

Â  Â  Â  Â  server.login(SMTP_USERNAME, SMTP_PASSWORD)

Â  Â  Â  Â  server.send_message(msg)





@app.route("/boss_analyze", methods=["POST"])

def boss_analyze():

Â  Â  data = request.get_json(force=True)



Â  Â  member_name = data.get("memberName", "").strip()

Â  Â  member_name_cn = data.get("memberNameCn", "").strip()

Â  Â  position = data.get("position", "").strip()

Â  Â  department = data.get("department", "").strip()

Â  Â  experience = data.get("experience", "").strip()

Â  Â  sector_raw = data.get("sector", "").strip()

Â  Â  challenge = data.get("challenge", "").strip()

Â  Â  focus = data.get("focus", "").strip()

Â  Â  email = data.get("email", "").strip()

Â  Â  country = data.get("country", "").strip()

Â  Â  age = compute_age(data)



Â  Â  # === REPHRASED SECTOR DESCRIPTIONS ===

Â  Â  sector_map = {

Â  Â  Â  Â  "Indoor â€“ Admin / HR / Ops / Finance": "the essential field of administration and operations",

Â  Â  Â  Â  "Indoor â€“ Technical / Engineering / IT": "the innovative field of technology and engineering",

Â  Â  Â  Â  "Outdoor â€“ Sales / BD / Retail": "the fast-paced world of sales and client-facing roles",

Â  Â  Â  Â  "Outdoor â€“ Servicing / Logistics / Fieldwork": "the dynamic world of logistics and field operations"

Â  Â  }

Â  Â  sector = sector_map.get(sector_raw, sector_raw) # Use the recrafted text, or the original if not found



Â  Â  raw_info = f"""

Â  Â  <h3>ðŸ“¥ Submitted Form Data:</h3>

Â  Â  <ul style="line-height:1.8;">

Â  Â  Â  <li><strong>Legal Name:</strong> {member_name}</li>

Â  Â  Â  <li><strong>Chinese Name:</strong> {member_name_cn}</li>

Â  Â  Â  <li><strong>Position:</strong> {position}</li>

Â  Â  Â  <li><strong>Department:</strong> {department}</li>

Â  Â  Â  <li><strong>Experience:</strong> {experience} years</li>

Â  Â  Â  <li><strong>Sector:</strong> {sector_raw}</li>

Â  Â  Â  <li><strong>Challenge:</strong> {challenge}</li>

Â  Â  Â  <li><strong>Focus:</strong> {focus}</li>

Â  Â  Â  <li><strong>Email:</strong> {email}</li>

Â  Â  Â  <li><strong>Country:</strong> {country}</li>

Â  Â  Â  <li><strong>Date of Birth:</strong> {data.get("dob_day", "")} - {data.get("dob_month", "")} - {data.get("dob_year", "")}</li>

Â  Â  Â  <li><strong>Referrer:</strong> {data.get("referrer", "")}</li>

Â  Â  Â  <li><strong>Contact Number:</strong> {data.get("contactNumber", "")}</li>

Â  Â  </ul>

Â  Â  <hr><br>

Â  Â  """



Â  Â  metrics = []

Â  Â  for title, color in [

Â  Â  Â  Â  ("Communication Efficiency", "#5E9CA0"),

Â  Â  Â  Â  ("Leadership Readiness", "#FF9F40"),

Â  Â  Â  Â  ("Task Completion Reliability", "#9966FF"),

Â  Â  ]:

Â  Â  Â  Â  seg, reg, glo = sorted([random.randint(60, 90), random.randint(55, 85), random.randint(60, 88)], reverse=True)

Â  Â  Â  Â  metrics.append((title, seg, reg, glo, color))



Â  Â  bar_html = ""

Â  Â  for title, seg, reg, glo, color in metrics:

Â  Â  Â  Â  bar_html += f"<strong>{title}</strong><br>"

Â  Â  Â  Â  labels = ["Segment", "Regional", "Global"]

Â  Â  Â  Â  values = [seg, reg, glo]

Â  Â  Â  Â  for i, v in enumerate(values):

Â  Â  Â  Â  Â  Â  bar_html += (

Â  Â  Â  Â  Â  Â  Â  Â  f"<span style='font-size:14px; width:80px; display:inline-block;'>{labels[i]}:</span>"

Â  Â  Â  Â  Â  Â  Â  Â  f"<span style='display:inline-block;width:{v}%;height:12px;"

Â  Â  Â  Â  Â  Â  Â  Â  f" background:{color}; margin-right:6px; border-radius:4px; vertical-align:middle;'></span> {v}%<br>"

Â  Â  Â  Â  Â  Â  )

Â  Â  Â  Â  bar_html += "<br>"

Â  Â  Â  Â Â 

Â  Â  # === DYNAMIC OPENING SENTENCES ===

Â  Â  opening_templates = [

Â  Â  Â  Â  f"A career spanning {experience} years within {sector} in {country} speaks volumes about a commitment to excellence and continuous adaptation.",

Â  Â  Â  Â  f"With {experience} years of dedicated experience in {country}'s demanding {sector} sector, a professional journey of significant growth and impact is clearly evident.",

Â  Â  Â  Â  f"Navigating the field of {sector} in {country} for {experience} years requires a unique blend of skill and determinationâ€”qualities that have clearly been cultivated throughout an impressive career.",

Â  Â  Â  Â  f"Building a career for {experience} years in {sector} within {country} is a testament to resilience and expertise."

Â  Â  ]

Â  Â  chosen_opening = random.choice(opening_templates)



Â  Â  # FINAL "YES" SUMMARY: Observational, rich, and dynamic

Â  Â  summary = (

Â  Â  Â  Â  "<div style='font-size:24px;font-weight:bold;margin-top:30px;'>ðŸ§  An Expert Analysis of This Professional Profile:</div><br>"

Â  Â  Â  Â  + f"<p style='line-height:1.8; font-size:16px; margin-bottom:18px; text-align:justify;'>"

Â  Â  Â  Â  + f"{chosen_opening} Such a path typically cultivates a remarkable ability to connect with others, reflected by a Communication Efficiency score of {metrics[0][1]}%. This is less a learned skill and more a foundational trait upon which strong teams and successful collaborations are built, enabling confident navigation of both internal objectives and the market's pulse."

Â  Â  Â  Â  + "</p>"

Â  Â  Â  Â  + f"<p style='line-height:1.8; font-size:16px; margin-bottom:18px; text-align:justify;'>"

Â  Â  Â  Â  + f"In today's business environment, true leadership is measured by influence and adaptability. A Leadership Readiness benchmarked at {metrics[1][2]}% regionally often indicates an intuitive grasp of these modern leadership pillars. This profile suggests a professional who provides the clarity and calm that teams gravitate towards in moments of pressure, fostering an environment of trust and inspiring collective action through respected guidance."

Â  Â  Â  Â  + "</p>"

Â  Â  Â  Â  + f"<p style='line-height:1.8; font-size:16px; margin-bottom:18px; text-align:justify;'>"

Â  Â  Â  Â  + f"The consistent ability to deliver, reflected in a Task Completion Reliability of {metrics[2][1]}%, is a clear indicator of profound impact and strategic wisdom. For an influential role like {position}, this demonstrates a rare discernmentâ€”the ability to identify which tasks matter most and execute them with excellence. This level of performance not only drives results but also signals readiness for even greater challenges."

Â  Â  Â  Â  + "</p>"

Â  Â  Â  Â  + f"<p style='line-height:1.8; font-size:16px; margin-bottom:18px; text-align:justify;'>"

Â  Â  Â  Â  + f"A focus on {focus} is a forward-thinking and insightful strategic choice. This aligns perfectly with major shifts occurring across the region, positioning this skill set as a cornerstone for future growth. Investing in this area points to a professional with a clear and promising trajectory, poised to make a lasting mark."

Â  Â  Â  Â  + "</p>"

Â  Â  )



Â  Â  prompt = (

Â  Â  Â  Â  f"Give 10 actionable, professional, and encouraging improvement ideas for a {position} from {country} "

Â  Â  Â  Â  f"with {experience} years in {sector_raw}, facing '{challenge}' and focusing on '{focus}'. "

Â  Â  Â  Â  f"Each idea should be a clear, constructive piece of advice. The tone should be empowering and respectful, not overly casual. Use emojis thoughtfully to add warmth, not to be unprofessional."

Â  Â  )

Â  Â  response = client.chat.completions.create(

Â  Â  Â  Â  model="gpt-3.5-turbo",

Â  Â  Â  Â  messages=[{"role": "user", "content": prompt}],

Â  Â  Â  Â  temperature=0.75Â 

Â  Â  )

Â  Â  tips = response.choices[0].message.content.strip().split("\n")

Â  Â  tips_html = "<div style='font-size:24px;font-weight:bold;margin-top:30px;'>ðŸ’¡ Creative Suggestions:</div><br>"

Â  Â  for line in tips:

Â  Â  Â  Â  if line.strip():

Â  Â  Â  Â  Â  Â  tips_html += f"<p style='margin:16px 0; font-size:17px;'>{line.strip()}</p>"



Â  Â  footer = (

Â  Â  Â  Â  '<div style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">'

Â  Â  Â  Â  '<strong>The insights in this report are generated by KataChatâ€™s AI systems analyzing:</strong><br>'

Â  Â  Â  Â  '1. Our proprietary database of anonymized professional profiles across Singapore, Malaysia, and Taiwan<br>'

Â  Â  Â  Â  '2. Aggregated global business benchmarks from trusted OpenAI research and leadership trend datasets<br>'

Â  Â  Â  Â  '<em>All data is processed through our AI models to identify statistically significant patterns while maintaining strict PDPA compliance.</em>'

Â  Â  Â  Â  '</div>'

Â  Â  Â  Â  '<p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">'

Â  Â  Â  Â  "<strong>PS:</strong> Your personalized report will arrive in your inbox within 24â€“48 hours. "

Â  Â  Â  Â  "If you'd like to discuss it further, feel free to reach out â€” we're happy to arrange a 15-minute call at your convenience."

Â  Â  Â  Â  "</p>"

Â  Â  )



Â  Â  email_output = raw_info + bar_html + summary + tips_html + footer

Â  Â  display_output = bar_html + summary + tips_html + footer



Â  Â  send_email(email_output)



Â  Â  return jsonify({

Â  Â  Â  Â  "analysis": display_output

Â  Â  })





if __name__ == "__main__":

Â  Â  app.run(debug=True, host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
